import java.text.SimpleDateFormat

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.3"
    }
}

allprojects {
    group 'org.ametiste.scm'
    version '0.1.0-1-RC'

    repositories {
        jcenter()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply from: '../dependencies.gradle'

    apply from: "https://raw.githubusercontent.com/ametiste-oss/ametiste-bintray-gradle/master/bintray-ext-ame-oss.gradle"
    apply from: "https://raw.githubusercontent.com/ametiste-oss/ametiste-bintray-gradle/master/bintray-ext.gradle"

    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    ext {
        bintray_vcsUrl = 'https://github.com/ametiste-oss/ametiste-scm-messaging.git'
    }

    configurations {
        deployerJars
        all {
            // check for updates every build
            resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        }
    }

    repositories {
        mavenCentral()
    }

    javadoc {
        options {
            encoding = 'UTF-8'
        }
    }

    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    test.outputs.upToDateWhen { false }
    test.testLogging.showStandardStreams = true

    test {
        afterTest { desc, result ->
            println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
        }
    }
}

apply plugin: 'groovy'
apply from: 'dependencies.gradle'

jar {
    enabled = false
}

dependencies {
    testCompile project(":scm-message-receiver")
    testCompile project(":scm-message-sender")
    testCompile project(":scm-message-sender-client")
    testCompile project(":scm-messages")

    testCompile libraries.spock
    testCompile libraries.spockSpring
    testCompile libraries.springBootTest
}